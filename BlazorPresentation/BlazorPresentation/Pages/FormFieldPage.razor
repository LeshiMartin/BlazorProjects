@page "/"
@using BlazorForm.Models
@using BlazorForm.Models.FormControls
@inject IJSRuntime JsRuntime
<h3>FormFieldPage</h3>


<FormGroupComponent FormGroup="FormGroup">
    <Controls>
        <TextControlComponent FormControlName="TextControl"
                              Appereance="Appereances.Outline">
        </TextControlComponent>
        <SelectControlComponent FormControlName="SelectControl"
                                Items="Items"
                                Searchable="true"
                                Appereance="Appereances.Filled">
        </SelectControlComponent>
        <NumberControlComponent FormControlName="NumberControl"
                                Appereance="Appereances.Filled">
        </NumberControlComponent>
        <CheckBoxComponent FormControlName="BooleanControl"
                           Color="Colors.Accent">
        </CheckBoxComponent>
        <RadioControlComponent Orientation="Orientation.Vertical"
                               Color="Colors.Accent"
                               FormControlName="RadioControl"
                               Items="Items">
        </RadioControlComponent>
        <DatetimeControlComponent Appereance="Appereances.Outline"
                                  FormControlName="DateControl">
        </DatetimeControlComponent>
        <DateOnlyControlComponent Appereance="Appereances.Filled"
                                  FormControlName="DateOnlyControl">
        </DateOnlyControlComponent>
        <TimeOnlyControlComponent FormControlName="TimeOnlyControl">
        </TimeOnlyControlComponent>
        <SubFormGroupComponent FormControlName="SubGroup">
            <Controls>
                <TextControlComponent FormControlName="TextControl1"></TextControlComponent>
                <TextControlComponent FormControlName="TextControl2"></TextControlComponent>
            </Controls>
        </SubFormGroupComponent>

    </Controls>
    <Buttons>
        <button @onclick="onClick" class="btn">
            Select
        </button>
    </Buttons>
</FormGroupComponent>

@code {

    public TextControl TextControl { get; } = new("TextControl", "Test");
    public NumberControl NumberControl { get; } = new(0, "NumberControl");
    public TextControl SelectControl { get; } = new("", "SelectControl");
    public BooleanControl BooleanControl { get; } = new(true, "BooleanControl");
    public TextControl RadioControl { get; } = new("Test", "RadioControl");
    public DateOnlyControl DateOnlyControl { get; } = new(DateTime.Now, "DateOnlyControl");
    public TimeOnlyControl TimeOnlyControl { get; } = new(DateTime.Now, "TimeOnlyControl");

    public ICollection<ISelectItem> Items { get; }
        = new List<ISelectItem>()
        {
            new SelectItem("Item1", "Item1"),
            new SelectItem("Item2", "Item2"),
            new SelectItem("Item3", "Item3"),
            new SelectItem("Item4", "Item4"),
        };


    public DateTimeControl DateControl { get; set; } = new(DateTime.Now, "DateControl");
    public DateTime Now { get; set; } = DateTime.Now;
    public DateOnly NowDate { get; set; }
    public TimeOnly NowTime => TimeOnly.FromDateTime(Now);

    internal FormGroup? FormGroup { get; set; }

    protected override void OnInitialized()
    {
        NowDate = DateOnly.FromDateTime(Now);
        base.OnInitialized();
        SelectControl.AddValueConverter((y) => y);

        TextControl.AddValidation(x => string.IsNullOrEmpty(((TextControl)x).Value) ? new ControlErrors("TextControl", "Value is required") : null);
        TextControl.AddValidation(x => string.IsNullOrEmpty(((TextControl)x).Value) ? new ControlErrors("TextContro1l", "Value should not be empty") : null);
        FormGroup = FormGroup.Create(
            ("TextControl", TextControl),
            ("NumberControl", NumberControl),
            ("SelectControl", SelectControl),
            ("BooleanControl", BooleanControl),
            ("RadioControl", RadioControl),
            ("DateControl", DateControl),
            ("DateOnlyControl", DateOnlyControl),
            ("TimeOnlyControl", TimeOnlyControl),
            ("SubGroup", FormGroup.Create(
                ("TextControl1", new TextControl(label: "SubText")),
                ("TextControl2", new TextControl(label: "SubText2"))
                ))
            );
    }

    protected async Task onClick()
    {
        var value = FormGroup!.GetValue();
        await JsRuntime.InvokeVoidAsync("console.log", value);
    }

    class SelectItem : ISelectItem
    {
        public SelectItem(string value, string text)
        {
            Value = value;
            Text = text;
        }

        public string Value { get; set; }
        public string Text { get; set; }
        public bool IsDisabled { get; set; }
        public bool IsChecked { get; set; }
    }

}